apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: gic-group-6
spec:
  podManagementPolicy: OrderedReady 
  serviceName: redis-cluster
  replicas: 6
  selector:
    matchLabels:
      app: redis-cluster # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: redis-cluster
        name: redis-cluster
    spec:
#      affinity:  # Ensure that each Redis instance is provisioned on a different k8s node
#        podAntiAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#            - labelSelector:
#                matchExpressions:
#                  - key: "app"
#                    operator: In
#                    values:
#                      - redis-cluster
#              topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 10
      containers:
      - name: redis-cluster
        image: redis:6.2.6
        ports:
        - containerPort: 6379
          name: client
        command:
        - sh
        args:
        - /conf/bootstrap-pod.sh
        #command: ["/conf/bootstrap-pod.sh", "redis-server", "/conf/redis.conf"]

        # Ensure that Redis is online before initializing the next node.
        # TODO: Test that the cluster node is init'd properly.
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 5
          timeoutSeconds: 5

        securityContext:
            capabilities:
              add:
                - IPC_LOCK
        # Mark a node as down if Redis server stops running
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 20
          periodSeconds: 3
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NUM_SHARDS
          value: "3"  # If you modify this value, make sure there are at least 2 times the number of replicas
        volumeMounts:
        - name: conf
          mountPath: /conf
          readOnly: false
        - name: podinfo
          mountPath: /etc/podinfo
          readOnly: false
      initContainers:
        # Wait for the redis-cluster service to exist. We need it to resolve the hostnames of our nodes
      - name: init-redis-cluster
        image: busybox:1.28
        command: ['sh', '-c', "until nslookup redis-cluster.gic-group-6.svc.cluster.local; do echo waiting for redis-cluster; sleep 2; done"]
      volumes:
      # Insert our pre-baked Redis configuration file into /conf/redis.conf
      - name: conf
        configMap:
          name: redis-config-map
          items: 
          - key: redis.conf
            path: redis.conf
          - key: bootstrap-pod.sh  # TODO: Move this or extract it into its own Docker image
            path: bootstrap-pod.sh
      # The init container will use this info to find cluster peers
      - name: podinfo
        downwardAPI:
          items:
            - path: "labels"
              fieldRef:
                fieldPath: metadata.labels
            - path: "annotations"
              fieldRef:
                fieldPath: metadata.annotations
            - path: "pod_name"
              fieldRef:
                fieldPath: metadata.name
            - path: "pod_namespace"
              fieldRef:
                fieldPath: metadata.namespace
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: longhorn
      resources:
        requests:
          storage: 1Gi



# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: redis-cluster
#   namespace: gic-group-6
# spec:
#   podManagementPolicy: OrderedReady # default
#   serviceName: redis-cluster
#   replicas: 6
#   selector:
#     matchLabels:
#       app: redis-cluster # has to match .spec.template.metadata.labels
#   template:
#     metadata:
#       labels:
#         app: redis-cluster
#         name: redis-cluster
#     spec:
#       securityContext:
#         runAsUser: 1000
#         runAsGroup: 1000
#       topologySpreadConstraints:
#         - maxSkew: 1
#           topologyKey: kubernetes.io/hostname
#           whenUnsatisfiable: ScheduleAnyway
#           labelSelector:
#             matchLabels:
#               type: redis-cluster  
#       terminationGracePeriodSeconds: 10
#       containers:
#       - name: redis
#         image: redis:latest
#         ports:
#         - containerPort: 6379
#           name: client
#         command:
#         - sh
#         args:
#         - /conf/update-node.sh
#         #command: ["sh", "-c", "/conf/update-node.sh", "redis-server", "/conf/redis.conf"]
#         #Ensure that Redis is online before initializing the next node.
#         # TODO: Test that the cluster node is init'd properly.
#         readinessProbe:
#           exec:
#             command:
#             - sh
#             - -c
#             - "redis-cli -h $(hostname) ping"
#           initialDelaySeconds: 5
#           timeoutSeconds: 5
#         securityContext:
#             capabilities:
#               add:
#                 - IPC_LOCK
#         # Mark a node as down if Redis server stops running
#         livenessProbe:
#           exec:
#             command:
#             - sh
#             - -c
#             - "redis-cli -h $(hostname) ping"
#           initialDelaySeconds: 20
#           periodSeconds: 3
#         env:
#         # - name: NODE_NAME
#         #   valueFrom:
#         #     fieldRef:
#         #       fieldPath: spec.nodeName
#         - name: NUM_SHARDS
#           value: "3"  # If you modify this value, make sure there are at least 2 times the number of replicas
#         volumeMounts:
#         - name: conf
#           mountPath: /conf
#           readOnly: false
#         - name: data
#           mountPath: /data
#           readOnly: false
#       initContainers:
#         # Wait for the redis-cluster service to exist. We need it to resolve the hostnames of our nodes
#       - name: init-redis-cluster
#         image: busybox:1.28
#         command: ['sh', '-c', "until nslookup redis-cluster.gic-cluster-6.svc.cluster.local; do echo waiting for redis-cluster; sleep 2; done; redis-server /conf/redis.conf"]
#       volumes:
#       # Insert our pre-baked Redis configuration file into /conf/redis.conf
#       - name: conf
#         configMap:
#           name: redis-config-map
#           items: 
#           - key: redis.conf
#             path: redis.conf
#           - key: update-node.sh
#             path: update-node.sh
#       - name: podinfo
#         downwardAPI:
#           items:
#             - path: "labels"
#               fieldRef:
#                 fieldPath: metadata.labels
#             - path: "annotations"
#               fieldRef:
#                 fieldPath: metadata.annotations
#             - path: "pod_name"
#               fieldRef:
#                 fieldPath: metadata.name
#             - path: "pod_namespace"
#               fieldRef:
#                 fieldPath: metadata.namespace
#   volumeClaimTemplates:
#   - metadata:
#       name: data
#     spec:
#       accessModes: [ "ReadWriteOnce" ]
#       storageClassName: longhorn
#       resources:
#         requests:
#           storage: 1Gi



# spec:
#   serviceName: redis-cluster
#   replicas: 6
#   podManagementPolicy: Parallel         # Each master node has a corresponding replica node (3 masters and 3 replicas)
#   updateStrategy:
#     type: RollingUpdate
#     rollingUpdate:
#       partition: 3
#   selector:
#     matchLabels:
#       app: redis-cluster
#   template:
#     metadata:
#       labels:
#         app: redis-cluster
#     spec:
#       containers:
#       - name: redis
#         image: redis:alpine
#         ports:
#         - containerPort: 6379
#           name: client
#         command: ["/conf/update-node.sh", "redis-server", "/conf/redis.conf"]
#         env:
#         - name: POD_IP
#           valueFrom:
#             fieldRef:
#               fieldPath: status.podIP
#         - name: REDIS_USERNAME
#           valueFrom:
#             secretKeyRef:
#               name: redis-secret
#               key: redis-username
#         - name: REDIS_PASSWORD
#           valueFrom:
#             secretKeyRef:
#               name: redis-secret
#               key: redis-password
#         volumeMounts:
#         - name: conf
#           mountPath: /conf
#           readOnly: false
#         - name: data
#           mountPath: /data
#           readOnly: false
#       volumes:
#       - name: conf
#         configMap:
#           name: redis-config-map
#           defaultMode: 0755
#       topologySpreadConstraints:
#         - maxSkew: 1
#           topologyKey: kubernetes.io/hostname
#           whenUnsatisfiable: ScheduleAnyway
#           labelSelector:
#             matchLabels:
#               type: redis-cluster    
#   volumeClaimTemplates:
#   - metadata:
#       name: data
#     spec:
#       accessModes: [ "ReadWriteOnce" ]
#       storageClassName: longhorn
#       resources:
#         requests:
#           storage: 1Gi