apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-master
  namespace: gic-group-6
spec:
  podManagementPolicy: OrderedReady 
  serviceName: redis-master-svc
  replicas: 3
  selector:
    matchLabels:
      app: redis-master # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: redis-master
        name: redis-master
    spec:
      affinity:  # Ensure that each Redis instance is provisioned on a different k8s node
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                      - redis-master
              topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 10
      containers:
      - name: redis-master
        image: redis:6.2.6
        ports:
        - containerPort: 6379
          name: client
        command:
        - sh
        args:
        - /conf/bootstrap-pod.sh
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 5
          timeoutSeconds: 5
        securityContext:
            capabilities:
              add:
                - IPC_LOCK
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 20
          periodSeconds: 3
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NUM_SHARDS
          value: "3"  # If you modify this value, make sure there are at least 2 times the number of replicas
        volumeMounts:
        - name: conf
          mountPath: /conf
          readOnly: false
        - name: podinfo
          mountPath: /etc/podinfo
          readOnly: false
      initContainers:
        # Wait for the redis-cluster service to exist. We need it to resolve the hostnames of our nodes
      - name: init-redis-master
        image: busybox:1.28
        command: ['sh', '-c', "until nslookup redis-master-svc.gic-group-6.svc.cluster.local; do echo waiting for redis-master-svc; sleep 2; done"]
      volumes:
      # Insert our pre-baked Redis configuration file into /conf/redis.conf
      - name: conf
        configMap:
          name: redis-config-map
          items: 
          - key: redis.conf
            path: redis.conf
          - key: bootstrap-pod.sh  # TODO: Move this or extract it into its own Docker image
            path: bootstrap-pod.sh
      # The init container will use this info to find cluster peers
      - name: podinfo
        downwardAPI:
          items:
            - path: "labels"
              fieldRef:
                fieldPath: metadata.labels
            - path: "annotations"
              fieldRef:
                fieldPath: metadata.annotations
            - path: "pod_name"
              fieldRef:
                fieldPath: metadata.name
            - path: "pod_namespace"
              fieldRef:
                fieldPath: metadata.namespace
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: longhorn
      resources:
        requests:
          storage: 1Gi
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-slave
  namespace: gic-group-6
spec:
  podManagementPolicy: OrderedReady 
  serviceName: redis-slave-svc
  replicas: 3
  selector:
    matchLabels:
      app: redis-slave
  template:
    metadata:
      labels:
        app: redis-slave
        name: redis-slave
    spec:
      affinity:  # Ensure that each Redis instance is provisioned on a different k8s node
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                      - redis-slave
              topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 10
      containers:
      - name: redis-slave
        image: redis:6.2.6
        ports:
        - containerPort: 6379
          name: client
        command:
        - sh
        args:
        - /conf/bootstrap-pod.sh
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 5
          timeoutSeconds: 5
        securityContext:
            capabilities:
              add:
                - IPC_LOCK
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 20
          periodSeconds: 3
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NUM_SHARDS
          value: "3"  # If you modify this value, make sure there are at least 2 times the number of replicas
        volumeMounts:
        - name: conf
          mountPath: /conf
          readOnly: false
        - name: podinfo
          mountPath: /etc/podinfo
          readOnly: false
      initContainers:
        # Wait for the redis-cluster service to exist. We need it to resolve the hostnames of our nodes
      - name: init-redis-slavei
        image: busybox:1.28
        command: ['sh', '-c', "until nslookup redis-slave-svc.gic-group-6.svc.cluster.local; do echo waiting for redis-slave-svc; sleep 2; done"]
      volumes:
      # Insert our pre-baked Redis configuration file into /conf/redis.conf
      - name: conf
        configMap:
          name: redis-config-map
          items: 
          - key: redis.conf
            path: redis.conf
          - key: bootstrap-pod.sh  # TODO: Move this or extract it into its own Docker image
            path: bootstrap-pod.sh
      # The init container will use this info to find cluster peers
      - name: podinfo
        downwardAPI:
          items:
            - path: "labels"
              fieldRef:
                fieldPath: metadata.labels
            - path: "annotations"
              fieldRef:
                fieldPath: metadata.annotations
            - path: "pod_name"
              fieldRef:
                fieldPath: metadata.name
            - path: "pod_namespace"
              fieldRef:
                fieldPath: metadata.namespace
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: longhorn
      resources:
        requests:
          storage: 1Gi